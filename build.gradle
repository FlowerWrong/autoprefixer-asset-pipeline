buildscript {
    repositories {
        mavenLocal()
        maven {
          url "https://plugins.gradle.org/m2/"
        }
    }
}

plugins {
    id "io.spring.dependency-management" version "1.0.1.RELEASE"
    id "com.jfrog.bintray" version "1.7.3"
    id "com.jfrog.artifactory" version "4.4.15"
}

version = '6.3.2'
group = 'com.uberall.plugins'

apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'eclipse'
apply plugin: 'idea'

ext {
    gradleWrapperVersion = project.gradleWrapperVersion
    isReleaseVersion = !version.endsWith('SNAPSHOT')
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenLocal()
    maven {
      url "https://plugins.gradle.org/m2/"
    }
    jcenter()
    mavenCentral()
}

configurations {
    provided
}

sourceSets {
    main {
        compileClasspath += configurations.provided
    }
}

dependencies {
    provided 'org.codehaus.groovy:groovy-all:2.4.10'

    compile 'org.codehaus.groovy:groovy:2.4.10'
    compile 'com.bertramlabs.plugins:asset-pipeline-core:2.14.1'
    // https://mvnrepository.com/artifact/org.mozilla/rhino
    compile group: 'org.mozilla', name: 'rhino', version: '1.7.7.1'

    compile 'log4j:log4j:1.2.17'
    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.0'

    testCompile group: 'org.spockframework', name: 'spock-core', version: '1.1-groovy-2.4-rc-4'

}

/*
publishing {
    publications {
        maven(MavenPublication) {
            artifactId 'add'
            pom.withXml {
                asNode().children().last() + {
                    resolveStrategy = Closure.DELEGATE_FIRST
                    name 'autoprefixer-asset-pipeline'
                    description 'Provides CSS autprefixing support for the Asset-Pipeline library.'
                    groupId group
                    artifactId artifact
                    version versino
                    url 'https://github.com/uberall/autoprefixer-asset-pipeline'
                    scm {
                        url 'https://github.com/uberall/autoprefixer-asset-pipeline'
                        connection 'scm:https://uberall@github.com/uberall/autoprefixer-asset-pipeline.git'
                        developerConnection 'scm:git://github.com/uberall/autoprefixer-asset-pipeline.git'
                    }
                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/license/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }
                    developers {
                        developer {
                            id 'peh'
                            name 'Philipp Eschenbach'
                            email 'philipp@uberall.com'
                        }
                    }
                }
            }
            from components.java
            artifact sourcesJar
            artifact javadocJar
        }
    }
    // repositories {
    //     maven {
    //         // change to point to your repo, e.g. http://my.org/repo
    //         url "https://github.com/uberall/uberall-plugins/raw/mvn-repo/"
    //     }
    // }
}
// servers {
//     server {
//         id 'github'
//         username gitHubUsername
//         password gitHubPassword
//     }
// }

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "file:///Users/philipp/Workspace/uberall-plugins")
        }
    }
}
*/


task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task(console, dependsOn: 'classes', type: JavaExec) {
    main = 'groovy.ui.Console'
    classpath = sourceSets.main.runtimeClasspath
}

test {
    testLogging {
        exceptionFormat = 'full'
        showStandardStreams = true
    }
}

uploadArchives.dependsOn build, sourcesJar, javadocJar

artifacts {
    archives sourcesJar
    archives javadocJar
}

task wrapper(type: Wrapper) {
    gradleVersion = gradleWrapperVersion
}

if (System.getenv('ARTIFACTORY_CONTEXT_URL')) {
    publishing {
        publications {
            mavenJava(MavenPublication) {
                pom.withXml {
                    def pomNode = asNode()
                    pomNode.dependencyManagement.replaceNode {}

                    // simply remove dependencies without a version
                    // version-less dependencies are handled with dependencyManagement
                    // see https://github.com/spring-gradle-plugins/dependency-management-plugin/issues/8 for more complete solutions
                    pomNode.dependencies.dependency.findAll {
                        it.version.text().isEmpty()
                    }.each {
                        it.replaceNode {}
                    }
                }
                from components.java
                def descriptor =
                        artifacts = ["build/libs/${rootProject.name}-${version}.jar", sourcesJar]

            }
        }
    }
    artifactory {
        contextUrl = System.getenv('ARTIFACTORY_CONTEXT_URL')

        publish {
            defaults {
                publications('mavenJava')
                publishArtifacts = true
                publishPom = true

            }
            repository {
                repoKey = "${version.contains('SNAPSHOT') ? (System.getenv('ARTIFACTORY_SNAPSHOT_REPO_KEY') ?: 'plugins-snapshot-local') : (System.getenv('ARTIFACTORY_RELEASE_REPO_KEY') ?: 'plugins-release-local')}"
                username = System.getenv('ARTIFACTORY_USERNAME') ?: 'admin'
                password = System.getenv('ARTIFACTORY_PASSWORD') ?: 'password'
            }
        }
    }
}
